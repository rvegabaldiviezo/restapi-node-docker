# COMANDOS

1_$ docker build -t <nameImagen> .
Crea una IMAGEN Docker, le asigna ese nombre y copia todo los archivos.

2_$ docker images
Para ver las imagenes de docker instaladas.

3_$ docker run <-d รณ -it> -p <puertoContenedor:puertoApp> <nameImagen>
Ejecuta la Imagen de Docker con ese nombre y que tengamos descargada.
    ej: $ docker -d -p 4000:3000 run <nameImagen>

Un detalle importante es en que puerto del conteiner de docker se va a 
exponere la aplicacion (a su vez internamente la app si se ejecuta dentro
del puerto 3000).

    _$ docker -it -p 4000:3000 run <nameImagen>
    Esta app se esta ejecutando en el puerto 3000 pero en este sistema le indicamos 
    que queremos acceder atraves del puerto 4000 (parametro -p). El parametro -it es 
    para indicarle que sea interactivo, es decir, que muestre por consola lo que 
    va ejecuntado. 

4_$ docker ds 
Permite ver que procesos estan activos, es decir, que imagenes estan corriendo en 
el conteiner.

    $ docker ds -a 
    Permite ver todos los procesos que se ejecutaron hasta el momento.


5_$ docker stop <CONTAINER_ID> 
Este CONTAINER_ID lo podemos ver en los procesos activos, basta con los primeros tres caracteres 

6_$ docker rm <CONTAINER_ID>
Elimina definitivamente el contenedor

7_$ docker stop $(docker ps -a -q)
Para PARAR todos los contenedores docker.

8_$ docker rm $(docker ps -a -q)
Para ELIMINAR todos los contenedores docker. Este se usa como paso previo
para poder eliminar imagenes que estan refenciadas en estos contenedores.

9_$ docker rmi <nameREPOSITORY>
ELIMINA LA IMAGEN, xej: $ docker rmi ramonbaldiviezo671/node-restapi

10_$ docker tag <nameImagen> <nameUserDockerHub>/<nameImagen>
xej:  docker tag node-restapi ramonbaldiviezo671/node-restapi
Crear una copia de la imagen pero en el formato usado en Docker Hub

11_$ docker login
Es para acceder a tu cuenta de Docker Hub. Este paso es necesario
para acto seguido subir al repo la imagen.
Username: ramonbaldiviezo671
Password: ...

12_$ docker push <nameUserDockerHub>/<nameImagen>
Este comando sube al Repo de Docker Hub la imagen. Una vez
subida ya es publica y desde cualquier maquina con Docker podemos
correr o ejecutar la app.

12_


# NOTAS
1-Crear una imagen del proyecto: es guardar nuestro proyeto con todos los requerimientos q
que necesita para poder correr/funcionar.

    1.1 Crear el archivo Dockerfile, dentro de este archivo, especificamos que es lo que necesita
    la aplicacion para poder funcionar. En nuestro ejemplo necesitamos:
    -Instalar Node (para cada maquina donde corra)   

    1.2 Docker Hub: Es como un Repositorio de contenedores (Imagenes), ahi buscamos los 
    CONTAINER que necesitamos.   

    # Los archivos de node nos dan las dependencias a nivel del proyecto o APLICACION, mientras 
    que Docker nos da las dependencias a nivel de SISTEMA, osea lo que necesita el sistema para 
    poder correr la aplicacion. 

ramon@ramon-Latitude-E6420:~$ docker images
}REPOSITORY                        TAG       IMAGE ID       CREATED        SIZE
ramonbaldiviezo671/node-restapi   latest    01674a53ea5f   3 hours ago    920MB
node                              12        fb17a1009e1c   6 days ago     918MB
postgres                          latest    346c7820a8fb   3 months ago   315MB
busybox                           latest    42b97d3c2ae9   4 months ago   1.24MB
gcr.io/k8s-minikube/kicbase       v0.0.25   8768eddc4356   5 months ago   1.1GB
hello-world                       latest    d1165f221234   9 months ago   13.3kB
